"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1e3],{4852:(e,n,s)=>{s.d(n,{Zo:()=>u,kt:()=>m});var t=s(9231);function a(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function i(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function o(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?i(Object(s),!0).forEach((function(n){a(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):i(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function r(e,n){if(null==e)return{};var s,t,a=function(e,n){if(null==e)return{};var s,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)s=i[t],n.indexOf(s)>=0||(a[s]=e[s]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)s=i[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var l=t.createContext({}),c=function(e){var n=t.useContext(l),s=n;return e&&(s="function"==typeof e?e(n):o(o({},n),e)),s},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var s=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(s),f=a,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return s?t.createElement(m,o(o({ref:n},u),{},{components:s})):t.createElement(m,o({ref:n},u))}));function m(e,n){var s=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=s.length,o=new Array(i);o[0]=f;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[p]="string"==typeof e?e:a,o[1]=r;for(var c=2;c<i;c++)o[c]=s[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,s)}f.displayName="MDXCreateElement"},9765:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var t=s(644),a=(s(9231),s(4852));const i={},o="Managing Sessions",r={unversionedId:"managing-sessions",id:"managing-sessions",title:"Managing Sessions",description:"A session can be managed in a few different ways. All sessions consist of a session key in the form of a did:key and a CACAO object-capability.",source:"@site/docs/managing-sessions.md",sourceDirName:".",slug:"/managing-sessions",permalink:"/docs/managing-sessions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Configuration",permalink:"/docs/configuration"},next:{title:"Concepts overview",permalink:"/docs/guides/concepts-overview"}},l={},c=[{value:"Automatically persisted sessions",id:"automatically-persisted-sessions",level:2},{value:"Session lifecycle management",id:"session-lifecycle-management",level:2},{value:"Manual session management",id:"manual-session-management",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...s}=e;return(0,a.kt)(p,(0,t.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"managing-sessions"},"Managing Sessions"),(0,a.kt)("p",null,"A session can be managed in a few different ways. All sessions consist of a session key in the form of a ",(0,a.kt)("inlineCode",{parentName:"p"},"did:key")," and a CACAO object-capability."),(0,a.kt)("h2",{id:"automatically-persisted-sessions"},"Automatically persisted sessions"),(0,a.kt)("p",null,"By default (when using ",(0,a.kt)("inlineCode",{parentName:"p"},"DIDSession.get(...)"),") sessions are persisted to ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"},"IndexedDB")," in the background. The private key for this session is always a ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/CryptoKey/extractable"},"non-extractable")," key, which means that they key itself can't be stolen by a malicious browser extension or script."),(0,a.kt)("p",null,"You can check if there already exists an authorized session for any given account using the ",(0,a.kt)("inlineCode",{parentName:"p"},"hasSessionFor")," method. This can be useful if you want to know if the ",(0,a.kt)("inlineCode",{parentName:"p"},"DIDSession.get")," call with result in a wallet interaction from the user, which will happen if ",(0,a.kt)("inlineCode",{parentName:"p"},"hasSessionFor")," returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (await DIDSession.hasSessionFor(accountId, resources: [...])) {\n  console.log(`There is an active session for ${accountId}`)\n}\n")),(0,a.kt)("h2",{id:"session-lifecycle-management"},"Session lifecycle management"),(0,a.kt)("p",null,"Additional helper functions are available on DIDSession instances to help you manage a session lifecycle and the user experience."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Check if authorized or created from existing session string\ndidsession.hasSession\n\n// Check if session expired\ndidsession.isExpired\n\n// Get resources session is authorized for\ndidsession.authorizations\n\n// Check number of seconds till expiration, may want to re auth user at a time before expiration\ndidsession.expiresInSecs\n")),(0,a.kt)("h2",{id:"manual-session-management"},"Manual session management"),(0,a.kt)("p",null,"If you don't want to rely on browsers non-extractable keys, or you are not in a browser environment you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"DIDSession.authorize(...)")," function. This function creates a session that can be serialized to a string. You can store this for later and then re-initialize. Currently sessions are valid\nfor 1 week by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Create session as above, store for later\nconst session = await DIDSession.authorize(authMethod, { resources: [...]})\nconst sessionString = session.serialize()\n\n// write/save session string where you want (e.g. filesystem)\n// ...\n\n// Later re initialize session\nconst session2 = await DIDSession.fromSession(sessionString)\n")))}d.isMDXComponent=!0}}]);